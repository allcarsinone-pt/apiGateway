{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "AllCarsInOne",
    "description": "An car stand aggregator"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/payments/createPayment": {
      "post": {
        "description": "Create a Payment",
        "summary": "Create a Payment",
        "tags": [
          "payments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment done sucessfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePaymentSuccessRequestBody"
                }
              }
            }
          },
          "400": {
            "description": "Vehicle not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/payments/getAllPayments": {
      "get": {
        "description": "Get All Payments for an user",
        "summary": "Get All Payments for an user",
        "tags": [
          "payments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllPaymentsForUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Got all payments sucessfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllPaymentsForUserSuccessRequestBody"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/payments/createPaymentMethod": {
      "post": {
        "description": "Create a Payment Method",
        "summary": "Create a Payment Method",
        "tags": [
          "payments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentMethodRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePaymentMethodSuccessRequestBody"
                }
              }
            }
          },
          "400": {
            "description": "name is required"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/payments/getAllPaymentMethods": {
      "get": {
        "description": "Get all Payment Methods",
        "summary": "Get all Payment Methods",
        "tags": [
          "payments"
        ],
        "responses": {
          "200": {
            "description": "Payment created successfully"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/payments/deletePaymentMethod/{id}": {
      "delete": {
        "description": "Delete a Payment Method by ID",
        "summary": "Delete a Payment Method by ID",
        "tags": [
          "payments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "number"
            },
            "description": "ID of the Payment Method to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Payment Method deleted successfully"
          },
          "400": {
            "description": "Error"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/stands/delete/{standid}": {
      "delete": {
        "description": "Deletes a Stand",
        "summary": "Delete a Stand by ID",
        "tags": [
          "stands"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "standid",
            "required": true,
            "schema": {
              "type": "number"
            },
            "description": "ID of the stand to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Stand deleted successfully"
          },
          "400": {
            "description": "Error"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/stands/edit": {
      "put": {
        "description": "Edits a Stand",
        "summary": "Edits a Stand",
        "tags": [
          "stands"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditStandRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Stand edited successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditStandSuccessRequestBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have name, location, phone, mobilephone, schedule, userid and standid"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/stands/register": {
      "post": {
        "description": "Registers a Stand",
        "summary": "Register a Stand",
        "tags": [
          "stands"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterStandRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Stand registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterStandSuccessRequestBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have name, location, phone, mobilephone, schedule and userid."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/gastype/delete/{gastypeid}": {
      "delete": {
        "description": "Deletes a GasType",
        "summary": "Delete a GasType by ID",
        "tags": [
          "vehicles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "gastypeid",
            "required": true,
            "schema": {
              "type": "number"
            },
            "description": "ID of the gas type to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Gas Type deleted successfully"
          },
          "400": {
            "description": "Error"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/gastype/edit": {
      "put": {
        "description": "Edit a GasType",
        "summary": "GasType edit",
        "tags": [
          "vehicles"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditGasTypeRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Gas Type updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditGasTypeSuccessRequestBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have gastypeid, name | GasType doesnt exists"
          },
          "401": {
            "description": "No token provided | Invalid Authentication"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/gastype/register": {
      "post": {
        "description": "Registers a Gas Type",
        "summary": "Register a Gas Type",
        "tags": [
          "vehicles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterGasTypeRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Gas Type registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterGasTypeSuccessResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have name"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/brand/delete/{brandid}": {
      "delete": {
        "description": "Deletes a Brand",
        "summary": "Delete a Brand by ID",
        "tags": [
          "vehicles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "brandid",
            "required": true,
            "schema": {
              "type": "number"
            },
            "description": "ID of brand to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Brand deleted successfully"
          },
          "400": {
            "description": "Error"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/brands/edit": {
      "put": {
        "description": "Edit a brand",
        "summary": "Brand edit",
        "tags": [
          "vehicles"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditBrandRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Brand updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditBrandSuccessRequestBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have brandid, name | Brand doesnt exists"
          },
          "401": {
            "description": "No token provided | Invalid Authentication"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/brands/register": {
      "post": {
        "description": "Registers a vehicle brand",
        "summary": "Register a vehicle brand",
        "tags": [
          "vehicles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterBrandRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Brand registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterBrandSuccessResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have name"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/delete/{vehicleid}": {
      "delete": {
        "description": "Deletes a Vehicle",
        "summary": "Delete a Vehicle by ID",
        "tags": [
          "vehicles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "vehicleid",
            "required": true,
            "schema": {
              "type": "number"
            },
            "description": "ID of vehicle to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Vehicle deleted successfully"
          },
          "400": {
            "description": "Error"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/filter": {
      "get": {
        "description": "Filter Vehicles with custom options",
        "summary": "Filter Vehicles with custom options",
        "tags": [
          "vehicles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterVehicleRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicles filtered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterVehicleSuccessResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Erro"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/get/{vehicleId}": {
      "get": {
        "description": "Get all details of a vehicle",
        "summary": "Get all details of a vehicle",
        "tags": [
          "vehicles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "vehicleId",
            "required": true,
            "schema": {
              "type": "number"
            },
            "description": "VehicleID for get details"
          }
        ],
        "responses": {
          "201": {
            "description": "Vehicle details got successfully."
          },
          "400": {
            "description": "Error"
          }
        }
      }
    },
    "/vehicles/edit": {
      "put": {
        "description": "Edit a vehicle",
        "summary": "Vehicle edit",
        "tags": [
          "vehicles"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditVehicleRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicle updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditVehicleSuccessRequestBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have vehicleid, standid, brandid, gastypeid, model, year, mileage, price, availability, description | Vehicle doesnt exists"
          },
          "401": {
            "description": "No token provided | Invalid Authentication"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/register": {
      "post": {
        "description": "Registers a vehicle",
        "summary": "Register a vehicle",
        "tags": [
          "vehicles"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterVehicleRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicle registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterVehicleSuccessResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have standid, brandid, gastypeid, model, year, mileage, price, availability, description"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/register": {
      "post": {
        "description": "Registers an user",
        "summary": "Register a user",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterUserSuccessResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Missing fields | Password must be at least 8 characters | Passwords don t match | Email already used | Invalid email"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "description": "Logs in a user",
        "summary": "Logs in a user",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginUserSuccessResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Email or password incorrect"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/validate": {
      "get": {
        "description": "Validates a user token",
        "summary": " User token validation",
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User validated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterUserSuccessResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Authentication | No token provided"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/edit": {
      "put": {
        "description": "Edit user profile",
        "summary": "User profile edit",
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterUserSuccessResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Missing fields | Email already used | Name is required| Invalid user"
          },
          "401": {
            "description": "No token provided | Invalid Authentication"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/changepwd": {
      "put": {
        "description": "Change password route when authenticated",
        "summary": "Change password route when authenticated",
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordSuccessRequestBody"
                }
              }
            }
          },
          "400": {
            "description": "Passwords do not match | Old password do not match | User not found"
          },
          "401": {
            "description": "No token provided | Invalid Authentication"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreatePaymentMethodRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Payment method name",
            "type": "string"
          }
        }
      },
      "CreatePaymentMethodSuccessResponseBody": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Payment Method ID",
            "type": "number"
          },
          "name": {
            "description": "Payment Name",
            "type": "number"
          }
        }
      },
      "GetAllPaymentMethodsRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Payment method name",
            "type": "string"
          }
        }
      },
      "GetAllPaymentMethodsSuccessResponseBody": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Payment Method ID",
            "type": "number"
          },
          "name": {
            "description": "Payment Name",
            "type": "number"
          }
        }
      },
      "CreatePaymentRequestBody": {
        "type": "object",
        "properties": {
          "vehicleId": {
            "description": "Vehicle ID",
            "type": "number"
          },
          "price": {
            "description": "Vehicle Price",
            "type": "number"
          },
          "date": {
            "description": "Vehicle date",
            "type": "string"
          },
          "userid": {
            "description": "User ID",
            "type": "number"
          },
          "paymentMethodId": {
            "description": "Payment Method ID",
            "type": "number"
          }
        }
      },
      "CreatePaymentSuccessResponseBody": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Payment ID",
            "type": "number"
          },
          "vehicleId": {
            "description": "Vehicle ID",
            "type": "number"
          },
          "price": {
            "description": "Vehicle Price",
            "type": "number"
          },
          "date": {
            "description": "Vehicle date",
            "type": "string"
          },
          "userid": {
            "description": "User ID",
            "type": "number"
          },
          "paymentMethodId": {
            "description": "Payment Method ID",
            "type": "number"
          }
        }
      },
      "GetAllPaymentsForUserRequestBody": {
        "type": "object",
        "properties": {
          "userId": {
            "description": "User ID",
            "type": "number"
          }
        }
      },
      "GetAllPaymentsForUserSuccessRequestBody": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Payment ID",
            "type": "number"
          },
          "vehicleId": {
            "description": "Vehicle Id",
            "type": "number"
          },
          "price": {
            "description": "Price",
            "type": "number"
          },
          "date": {
            "description": "Date",
            "type": "string"
          },
          "userId": {
            "description": "User ID",
            "type": "number"
          },
          "paymentMethodId": {
            "description": "Payment Method Id",
            "type": "number"
          }
        }
      },
      "RegisterStandRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Stand Name",
            "type": "string"
          },
          "location": {
            "description": "Stand location",
            "type": "string"
          },
          "phone": {
            "description": "Stand Phone",
            "type": "string"
          },
          "mobilephone": {
            "description": "Stand mobilephone",
            "type": "string"
          },
          "schedule": {
            "description": "Stand Schedule",
            "type": "string"
          },
          "userid": {
            "description": "UserID (Stand Owner)",
            "type": "integer"
          }
        }
      },
      "RegisterStandSuccessResponseBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Stand name",
            "type": "string"
          },
          "location": {
            "description": "Stand location",
            "type": "string"
          },
          "phone": {
            "description": "Stand phone",
            "type": "string"
          },
          "mobilephone": {
            "description": "Stand mobilephone",
            "type": "string"
          },
          "schedule": {
            "description": "Stand Schedule"
          },
          "userid": {
            "description": "Owner of Stand (userid)",
            "type": "integer"
          }
        }
      },
      "EditStandRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Stand name",
            "type": "string"
          },
          "location": {
            "description": "Stand location",
            "type": "string"
          },
          "phone": {
            "description": "Stand phone",
            "type": "string"
          },
          "mobilephone": {
            "description": "Stand mobilephone",
            "type": "string"
          },
          "schedule": {
            "description": "Stand Schedule"
          },
          "userid": {
            "description": "Owner of Stand (userid)",
            "type": "integer"
          },
          "standid": {
            "description": "Stand ID",
            "type": "integer"
          }
        }
      },
      "EditStandSuccessRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Stand name",
            "type": "string"
          },
          "location": {
            "description": "Stand location",
            "type": "string"
          },
          "phone": {
            "description": "Stand phone",
            "type": "string"
          },
          "mobilephone": {
            "description": "Stand mobilephone",
            "type": "string"
          },
          "schedule": {
            "description": "Stand Schedule"
          },
          "userid": {
            "description": "Owner of Stand (userid)",
            "type": "integer"
          },
          "standid": {
            "description": "Stand ID",
            "type": "integer"
          }
        }
      },
      "EditBrandSuccessRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "New name of brand",
            "type": "string"
          }
        }
      },
      "EditVehicleSuccessRequestBody": {
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of vehicle",
            "type": "integer"
          },
          "standid": {
            "description": "StandID of vehicle",
            "type": "integer"
          },
          "brandid": {
            "description": "BrandID of vehicle",
            "type": "integer"
          },
          "gastypeid": {
            "description": "GasTypeID of vehicle",
            "type": "integer"
          },
          "model": {
            "description": "Vehicle model",
            "type": "string"
          },
          "year": {
            "description": "Vehicle year",
            "type": "string"
          },
          "mileage": {
            "description": "Vehicle mileage",
            "type": "string"
          },
          "price": {
            "description": "Vehicle price",
            "type": "string"
          },
          "availability": {
            "description": "Vehicle availability",
            "type": "string"
          },
          "description": {
            "description": "Vehicle description",
            "type": "string"
          }
        }
      },
      "EditVehicleRequestBody": {
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of vehicle",
            "type": "integer"
          },
          "standid": {
            "description": "StandID of vehicle",
            "type": "integer"
          },
          "brandid": {
            "description": "BrandID of vehicle",
            "type": "integer"
          },
          "gastypeid": {
            "description": "GasTypeID of vehicle",
            "type": "integer"
          },
          "model": {
            "description": "Vehicle model",
            "type": "string"
          },
          "year": {
            "description": "Vehicle year",
            "type": "string"
          },
          "mileage": {
            "description": "Vehicle mileage",
            "type": "string"
          },
          "price": {
            "description": "Vehicle price",
            "type": "string"
          },
          "availability": {
            "description": "Vehicle availability",
            "type": "string"
          },
          "description": {
            "description": "Vehicle description",
            "type": "string"
          }
        }
      },
      "FilterVehicleRequestBody": {
        "type": "object",
        "properties": {
          "brandname": {
            "description": "Brand name",
            "type": "string"
          },
          "model": {
            "description": "Model",
            "type": "string"
          },
          "mileage": {
            "description": "Mileage",
            "type": "number"
          },
          "price": {
            "description": "Price",
            "type": "number"
          },
          "availability": {
            "description": "Availability",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "gastypename": {
            "description": "GasType Name",
            "type": "string"
          }
        }
      },
      "FilterVehicleSuccessResponseBody": {
        "type": "object",
        "properties": {
          "standid": {
            "description": "Stand ID",
            "type": "integer"
          },
          "brandid": {
            "description": "Brand ID",
            "type": "integer"
          },
          "gastypeid": {
            "description": "GasType ID",
            "type": "integer"
          },
          "model": {
            "description": "Vehicle model",
            "type": "string"
          },
          "year": {
            "description": "Vehicle year",
            "type": "integer"
          },
          "mileage": {
            "description": "Vehicle mileage",
            "type": "integer"
          },
          "price": {
            "description": "Vehicle price",
            "type": "integer"
          },
          "availability": {
            "description": "Vehicle availability",
            "type": "boolean"
          },
          "description": {
            "description": "Vehicle description",
            "type": "string"
          },
          "id": {
            "description": "Vehicle id",
            "type": "integer"
          }
        }
      },
      "RegisterVehicleSuccessResponseBody": {
        "type": "object",
        "properties": {
          "standid": {
            "description": "Stand ID",
            "type": "integer"
          },
          "brandid": {
            "description": "Brand ID",
            "type": "integer"
          },
          "gastypeid": {
            "description": "GasType ID",
            "type": "integer"
          },
          "model": {
            "description": "Vehicle model",
            "type": "string"
          },
          "year": {
            "description": "Vehicle year",
            "type": "integer"
          },
          "mileage": {
            "description": "Vehicle mileage",
            "type": "integer"
          },
          "price": {
            "description": "Vehicle price",
            "type": "integer"
          },
          "availability": {
            "description": "Vehicle availability",
            "type": "boolean"
          },
          "description": {
            "description": "Vehicle description",
            "type": "string"
          },
          "id": {
            "description": "Vehicle id",
            "type": "integer"
          }
        }
      },
      "RegisterVehicleRequestBody": {
        "type": "object",
        "properties": {
          "standid": {
            "description": "StandID of vehicle",
            "type": "integer"
          },
          "brandid": {
            "description": "BrandID of vehicle",
            "type": "integer"
          },
          "gastypeid": {
            "description": "GasTypeID of vehicle",
            "type": "integer"
          },
          "model": {
            "description": "Vehicle model",
            "type": "string"
          },
          "year": {
            "description": "Vehicle year",
            "type": "integer"
          },
          "mileage": {
            "description": "Vehicle mileage",
            "type": "string"
          },
          "price": {
            "description": "Vehicle price",
            "type": "string"
          },
          "availability": {
            "description": "Vehicle availability",
            "type": "string"
          },
          "description": {
            "description": "Vehicle description",
            "type": "string"
          }
        }
      },
      "RegisterGasTypeRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "GasType name",
            "type": "string"
          }
        }
      },
      "EditGasTypeRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "GasType name",
            "type": "string"
          },
          "id": {
            "description": "GasType ID",
            "type": "integer"
          }
        }
      },
      "RegisterBrandSuccessResponseBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Brand ID",
            "type": "string"
          }
        }
      },
      "RegisterBrandRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Brand name",
            "type": "string"
          }
        }
      },
      "EditBrandRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Brand name",
            "type": "string"
          },
          "brandid": {
            "description": "Brand ID",
            "type": "integer"
          }
        }
      },
      "ChangePasswordSuccessRequestBody": {
        "type": "object",
        "properties": {
          "success": {
            "description": "Password success",
            "type": "boolean"
          },
          "data": {
            "description": "User data",
            "type": "object"
          }
        }
      },
      "ChangePasswordRequestBody": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "description": "User old password",
            "type": "string"
          },
          "password": {
            "description": "User new password",
            "type": "string"
          },
          "confirmPassword": {
            "description": "User confirm new password",
            "type": "string"
          }
        }
      },
      "EditUserRequestBody": {
        "type": "object",
        "properties": {
          "username": {
            "description": "New username",
            "type": "string"
          },
          "name": {
            "description": "New user name",
            "type": "string"
          },
          "email": {
            "description": "New user email",
            "type": "string"
          },
          "mobilephone": {
            "description": "New user mobilephone",
            "type": "string"
          },
          "city": {
            "description": "New user city"
          },
          "address": {
            "description": "New user address",
            "type": "string"
          },
          "postalcode": {
            "description": "New user postalcode",
            "type": "string"
          },
          "role_id": {
            "description": "New user role_id",
            "type": "integer"
          }
        }
      },
      "LoginUserSuccessResponseBody": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          }
        }
      },
      "LoginUserRequestBody": {
        "type": "object",
        "properties": {
          "email": {
            "description": "Email to login",
            "type": "string"
          },
          "password": {
            "description": "User password",
            "type": "string"
          }
        }
      },
      "RegisterUserSuccessResponseBody": {
        "type": "object",
        "properties": {
          "username": {
            "description": "User name",
            "type": "string"
          },
          "name": {
            "description": "Name of user",
            "type": "string"
          },
          "email": {
            "description": "User email",
            "type": "string"
          },
          "city": {
            "description": "User city",
            "type": "string"
          },
          "mobilephone": {
            "description": "User mobilephone",
            "type": "string"
          },
          "address": {
            "description": "User address",
            "type": "string"
          },
          "postalcode": {
            "description": "User postalcode",
            "type": "string"
          },
          "password": {
            "description": "User password",
            "type": "string"
          },
          "role_id": {
            "description": "Users role id",
            "type": "integer"
          }
        }
      },
      "RegisterUserRequestBody": {
        "type": "object",
        "properties": {
          "username": {
            "description": "User name",
            "type": "string"
          },
          "name": {
            "description": "Name of user",
            "type": "string"
          },
          "email": {
            "description": "User email",
            "type": "string"
          },
          "mobilephone": {
            "description": "User mobilephone",
            "type": "string"
          },
          "city": {
            "description": "User city"
          },
          "address": {
            "description": "User address",
            "type": "string"
          },
          "postalcode": {
            "description": "User postalcode",
            "type": "string"
          },
          "confirmPassword": {
            "description": "User password confirmation"
          },
          "password": {
            "description": "User password",
            "type": "string"
          },
          "role_id": {
            "description": "Users role id",
            "type": "integer"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "Get all users routes"
    },
    {
      "name": "vehicles",
      "description": "Get all vehicles routes"
    },
    {
      "name": "payments",
      "description": "Get all payments routes"
    },
    {
      "name": "stands",
      "description": "Get all stands routes"
    }
  ]
}
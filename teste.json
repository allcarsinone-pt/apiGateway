{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "AllCarsInOne",
    "description": "An car stand aggregator"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/vehicles/gastype/edit": {
      "put": {
        "description": "Edit a GasType",
        "summary": "GasType edit",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditGasTypeRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Gas Type updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditGasTypeSuccessRequestBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have gastypeid, name | GasType doesnt exists"
          },
          "401": {
            "description": "No token provided | Invalid Authentication"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/gastype/register": {
      "post": {
        "description": "Registers a Gas Type",
        "summary": "Register a Gas Type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterGasTypeRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Brand registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterGasTypeSuccessResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have name"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/brands/edit": {
      "put": {
        "description": "Edit a brand",
        "summary": "Brand edit",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditBrandRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Brand updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditBrandSuccessRequestBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have brandid, name | Brand doesnt exists"
          },
          "401": {
            "description": "No token provided | Invalid Authentication"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/brands/register": {
      "post": {
        "description": "Registers a vehicle brand",
        "summary": "Register a vehicle brand",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterBrandRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Brand registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterBrandSuccessResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have name"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/edit": {
      "put": {
        "description": "Edit a vehicle",
        "summary": "Vehicle edit",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditVehicleRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicle updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditVehicleSuccessRequestBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have vehicleid, standid, brandid, gastypeid, model, year, mileage, price, availability, description | Vehicle doesnt exists"
          },
          "401": {
            "description": "No token provided | Invalid Authentication"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/register": {
      "post": {
        "description": "Registers a vehicle",
        "summary": "Register a vehicle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vehicle registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterVehicleSuccessResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required. It should have standid, brandid, gastypeid, model, year, mileage, price, availability, description"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/register": {
      "post": {
        "description": "Registers an user",
        "summary": "Register a user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterUserSuccessResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Missing fields | Password must be at least 8 characters | Passwords don t match | Email already used | Invalid email"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "description": "Logs in a user",
        "summary": "Logs in a user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginUserSuccessResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Email or password incorrect"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/validate": {
      "get": {
        "description": "Validates a user token",
        "summary": " User token validation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User validated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterUserSuccessResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Authentication | No token provided"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/edit": {
      "put": {
        "description": "Edit user profile",
        "summary": "User profile edit",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterUserSuccessResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Missing fields | Email already used | Name is required| Invalid user"
          },
          "401": {
            "description": "No token provided | Invalid Authentication"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/changepwd": {
      "put": {
        "description": "Change password route when authenticated",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordSuccessRequestBody"
                }
              }
            }
          },
          "400": {
            "description": "Passwords do not match | Old password do not match | User not found"
          },
          "401": {
            "description": "No token provided | Invalid Authentication"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EditBrandSuccessRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "New name of brand",
            "type": "string"
          }
        }
      },
      "EditVehicleSuccessRequestBody": {
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of vehicle",
            "type": "string"
          },
          "standid": {
            "description": "StandID of vehicle",
            "type": "string"
          },
          "brandid": {
            "description": "BrandID of vehicle",
            "type": "string"
          },
          "gastypeid": {
            "description": "GasTypeID of vehicle",
            "type": "string"
          },
          "model": {
            "description": "Vehicle model",
            "type": "string"
          },
          "year": {
            "description": "Vehicle year",
            "type": "string"
          },
          "mileage": {
            "description": "Vehicle mileage",
            "type": "string"
          },
          "price": {
            "description": "Vehicle price",
            "type": "string"
          },
          "availability": {
            "description": "Vehicle availability",
            "type": "string"
          },
          "description": {
            "description": "Vehicle description",
            "type": "string"
          }
        }
      },
      "EditVehicleRequestBody": {
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of vehicle",
            "type": "string"
          },
          "standid": {
            "description": "StandID of vehicle",
            "type": "string"
          },
          "brandid": {
            "description": "BrandID of vehicle",
            "type": "string"
          },
          "gastypeid": {
            "description": "GasTypeID of vehicle",
            "type": "string"
          },
          "model": {
            "description": "Vehicle model",
            "type": "string"
          },
          "year": {
            "description": "Vehicle year",
            "type": "string"
          },
          "mileage": {
            "description": "Vehicle mileage",
            "type": "string"
          },
          "price": {
            "description": "Vehicle price",
            "type": "string"
          },
          "availability": {
            "description": "Vehicle availability",
            "type": "string"
          },
          "description": {
            "description": "Vehicle description",
            "type": "string"
          }
        }
      },
      "RegisterVehicleSuccessResponseBody": {
        "type": "object",
        "properties": {
          "standid": {
            "description": "Stand ID",
            "type": "integer"
          },
          "brandid": {
            "description": "Brand ID",
            "type": "integer"
          },
          "gastypeid": {
            "description": "GasType ID",
            "type": "integer"
          },
          "model": {
            "description": "Vehicle model",
            "type": "string"
          },
          "year": {
            "description": "Vehicle year",
            "type": "integer"
          },
          "mileage": {
            "description": "Vehicle mileage",
            "type": "integer"
          },
          "price": {
            "description": "Vehicle price",
            "type": "integer"
          },
          "availability": {
            "description": "Vehicle availability",
            "type": "boolean"
          },
          "description": {
            "description": "Vehicle description",
            "type": "string"
          },
          "id": {
            "description": "Vehicle id",
            "type": "integer"
          }
        }
      },
      "RegisterVehicleRequestBody": {
        "type": "object",
        "properties": {
          "standid": {
            "description": "StandID of vehicle",
            "type": "string"
          },
          "brandid": {
            "description": "BrandID of vehicle",
            "type": "string"
          },
          "gastypeid": {
            "description": "GasTypeID of vehicle",
            "type": "string"
          },
          "model": {
            "description": "Vehicle model",
            "type": "string"
          },
          "year": {
            "description": "Vehicle year",
            "type": "string"
          },
          "mileage": {
            "description": "Vehicle mileage",
            "type": "string"
          },
          "price": {
            "description": "Vehicle price",
            "type": "string"
          },
          "availability": {
            "description": "Vehicle availability",
            "type": "string"
          },
          "description": {
            "description": "Vehicle description",
            "type": "string"
          }
        }
      },
      "RegisterGasTypeRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "GasType name",
            "type": "string"
          }
        }
      },
      "EditGasTypeRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "GasType name",
            "type": "string"
          },
          "id": {
            "description": "GasType ID",
            "type": "integer"
          }
        }
      },
      "RegisterBrandSuccessResponseBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Brand ID",
            "type": "string"
          }
        }
      },
      "RegisterBrandRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Brand name",
            "type": "string"
          }
        }
      },
      "EditBrandRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Brand name",
            "type": "string"
          },
          "brandid": {
            "description": "Brand ID",
            "type": "integer"
          }
        }
      },
      "RegisterStandRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Stand name",
            "type": "string"
          },
          "location": {
            "description": "Stand location",
            "type": "string"
          },
          "phone": {
            "description": "Stand phone",
            "type": "string"
          },
          "mobilephone": {
            "description": "Stand mobilephone",
            "type": "string"
          },
          "schedule": {
            "description": "Stand Schedule"
          },
          "userid": {
            "description": "Owner of Stand (userid)",
            "type": "integer"
          }
        }
      },
      "EditStandRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Stand name",
            "type": "string"
          },
          "location": {
            "description": "Stand location",
            "type": "string"
          },
          "phone": {
            "description": "Stand phone",
            "type": "string"
          },
          "mobilephone": {
            "description": "Stand mobilephone",
            "type": "string"
          },
          "schedule": {
            "description": "Stand Schedule"
          },
          "userid": {
            "description": "Owner of Stand (userid)",
            "type": "integer"
          },
          "standid": {
            "description": "Stand ID",
            "type": "integer"
          }
        }
      },
      "ChangePasswordSuccessRequestBody": {
        "type": "object",
        "properties": {
          "success": {
            "description": "Password success",
            "type": "boolean"
          },
          "data": {
            "description": "User data",
            "type": "object"
          }
        }
      },
      "ChangePasswordRequestBody": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "description": "User old password",
            "type": "string"
          },
          "password": {
            "description": "User new password",
            "type": "string"
          },
          "confirmPassword": {
            "description": "User confirm new password",
            "type": "string"
          }
        }
      },
      "EditUserRequestBody": {
        "type": "object",
        "properties": {
          "username": {
            "description": "New username",
            "type": "string"
          },
          "name": {
            "description": "New user name",
            "type": "string"
          },
          "email": {
            "description": "New user email",
            "type": "string"
          },
          "mobilephone": {
            "description": "New user mobilephone",
            "type": "string"
          },
          "city": {
            "description": "New user city"
          },
          "address": {
            "description": "New user address",
            "type": "string"
          },
          "postalcode": {
            "description": "New user postalcode",
            "type": "string"
          },
          "role_id": {
            "description": "New user role_id",
            "type": "integer"
          }
        }
      },
      "LoginUserSuccessResponseBody": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          }
        }
      },
      "LoginUserRequestBody": {
        "type": "object",
        "properties": {
          "email": {
            "description": "Email to login",
            "type": "string"
          },
          "password": {
            "description": "User password",
            "type": "string"
          }
        }
      },
      "RegisterUserSuccessResponseBody": {
        "type": "object",
        "properties": {
          "username": {
            "description": "User name",
            "type": "string"
          },
          "name": {
            "description": "Name of user",
            "type": "string"
          },
          "email": {
            "description": "User email",
            "type": "string"
          },
          "city": {
            "description": "User city",
            "type": "string"
          },
          "mobilephone": {
            "description": "User mobilephone",
            "type": "string"
          },
          "address": {
            "description": "User address",
            "type": "string"
          },
          "postalcode": {
            "description": "User postalcode",
            "type": "string"
          },
          "password": {
            "description": "User password",
            "type": "string"
          },
          "role_id": {
            "description": "Users role id",
            "type": "integer"
          }
        }
      },
      "RegisterUserRequestBody": {
        "type": "object",
        "properties": {
          "username": {
            "description": "User name",
            "type": "string"
          },
          "name": {
            "description": "Name of user",
            "type": "string"
          },
          "email": {
            "description": "User email",
            "type": "string"
          },
          "mobilephone": {
            "description": "User mobilephone",
            "type": "string"
          },
          "city": {
            "description": "User city"
          },
          "address": {
            "description": "User address",
            "type": "string"
          },
          "postalcode": {
            "description": "User postalcode",
            "type": "string"
          },
          "confirmPassword": {
            "description": "User password confirmation"
          },
          "password": {
            "description": "User password",
            "type": "string"
          },
          "role_id": {
            "description": "Users role id",
            "type": "integer"
          }
        }
      },
      "SpacecraftId": {
        "description": "The unique identifier of a spacecraft",
        "type": "string"
      },
      "Spacecraft": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/SpacecraftId"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "capsule",
              "probe",
              "satellite",
              "spaceplane",
              "station"
            ]
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "description": "A human readable error message",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}